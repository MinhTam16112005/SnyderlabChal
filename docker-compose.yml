services:
  # Chosen time-series database: TimescaleDB on Postgres
  timescaledb:
    env_file:
      - .env
    image: timescale/timescaledb:latest-pg15
    volumes:
      # Persist DB data across restarts
      - tsdb-data:/var/lib/postgresql/data
      # Run our init SQL on first boot
      - ./timescaledb/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      # This is database superuser credentials and db name, these are service-specific value so I don't put it into .env
      POSTGRES_USER: fitbit_user
      POSTGRES_PASSWORD: fitbit_password
      POSTGRES_DB: fitbit_data
    ports:
      - "5433:5432"
    networks:
      - snyder-net

  # This is ingestion service that runs our Python + cron job (main program)
  ingester:
    env_file:
      - .env
    build: ./ingestion
    volumes:
      # Mount the entire project root so it can access all code
      - ./:/app
      # Keep the specific last_run.txt mount for persistence
      - ./ingestion/last_run.txt:/app/last_run.txt
    environment:
      DB_HOST: ${DB_HOST} #eg: timescaledb
      DB_PORT: ${DB_PORT} #eg: 5432
      DB_NAME: ${DB_NAME} #eg: fitbit_data
      DB_USER: ${DB_USER} #eg: fitbit_user
      DB_PASSWORD: ${DB_PASSWORD} #eg: fitbit_password
      USER_ID: ${USER_ID} #eg: user_1
      SEED: ${SEED} #eg: 100
    depends_on:
      - timescaledb
    networks:
      - snyder-net
    # Cron is configured inside the Dockerfile (via /etc/cron.d/fitbit-cron)

  # Backend API service
  backend:
    build:
      context: ./backend
    env_file:
      - .env
    volumes:
      # Mount the entire project root so it can access ingestion/ folder
      - ./:/app
    environment:
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
    working_dir: /app/backend  # Set working directory to where app.py is located
    command: python app.py     # Override the default command to run from correct location
    ports:
      - "5001:5000"
    depends_on:
      - timescaledb
    networks:
      - snyder-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/healthz || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoring Services
  
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - snyder-net
    restart: unless-stopped

  # Grafana - Visualization dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"  # Using 3001 to avoid conflict with frontend
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
    networks:
      - snyder-net
    restart: unless-stopped

  # AlertManager - Alert routing and notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    networks:
      - snyder-net
    restart: unless-stopped

  # MailHog - Fake SMTP server for testing email alerts
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - snyder-net
    restart: unless-stopped

  # Node Exporter - Host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - snyder-net
    restart: unless-stopped

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - snyder-net
    restart: unless-stopped

volumes:
  tsdb-data:
    name: timescaledb
  prometheus-data:
  grafana-data:

networks:
  snyder-net:
    driver: bridge